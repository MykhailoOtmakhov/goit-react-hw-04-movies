{"version":3,"sources":["components/Searchbar/Searchbar.js","components/MovieApiService.js","utils/getQueryParams.js","components/MoviesPage/MoviesPage.js","components/MovieList/MovieList.js"],"names":["Searchbar","state","query","handleChange","evt","setState","currentTarget","value","toLowerCase","handleSubmit","preventDefault","trim","props","onSubmit","toast","this","type","autoComplete","autoFocus","placeholder","onChange","Component","withRouter","api","fetchMovie","nextQuery","fetch","then","response","ok","json","Promise","reject","Error","getQueryParams","qs","queryString","parse","MoviesPage","movies","results","fetchMovieWithQuery","fetchAPI","data","catch","error","console","log","handleQueryChange","history","push","pathname","location","search","prevProps","prevState","prevQuery","MovieList","map","result","to","id","from","title"],"mappings":"kOAMMA,E,4MACFC,MAAO,CACLC,MAAO,I,EAGbC,aAAe,SAAAC,GACX,EAAKC,SAAS,CAAEH,MAAOE,EAAIE,cAAcC,MAAMC,iB,EAGnDC,aAAe,SAAAL,GACXA,EAAIM,iBAC2B,KAA5B,EAAKT,MAAMC,MAAMS,QAKpB,EAAKC,MAAMC,SAAS,EAAKZ,MAAMC,OAC/B,EAAKG,SAAS,CAACH,MAAO,MALpBY,YAAM,qB,4CAQZ,WACI,OACI,uBAEED,SAAUE,KAAKN,aAFjB,UAGE,uBAEEO,KAAK,OACLC,aAAa,MACbC,WAAS,EACTC,YAAY,eACZZ,MAAOQ,KAAKd,MAAMC,MAClBkB,SAAUL,KAAKZ,eAEjB,wBAAQa,KAAK,SAAb,2B,GAlCcK,aA+CTC,cAAWtB,GCzC1B,IAIeuB,EAJH,CACRC,WAbJ,SAAoBC,GAEhB,OAAOC,MAAM,qDAAD,OADG,mCACH,iCAAqFD,EAArF,gCACXE,MAAK,SAAAC,GACF,OAAGA,EAASC,GACDD,EAASE,OAEbC,QAAQC,OACX,IAAIC,MAAJ,kEAAwBR,U,yBCNrB,SAASS,EAAeC,GACnC,OAAOC,IAAYC,MAAMF,G,ICQvBG,E,4MACFrC,MAAQ,CACJC,MAAM,GACNqC,OAAQ,GACRC,QAAS,I,EAGbC,oBAAsB,SAAAvC,GAAK,OAAIwC,EAASlB,WAAWtB,GAClDyB,MAAK,SAAAgB,GAAI,OAAI,EAAKtC,SAAS,CAACmC,QAASG,EAAKH,aAC1CI,OAAM,SAAAC,GAAK,OAAIC,QAAQC,IAAIF,O,EAkB5BG,kBAAoB,SAAA9C,GAChB,EAAKU,MAAMqC,QAAQC,KAAK,CACpBC,SAAU,EAAKvC,MAAMwC,SAASD,SAC9BE,OAAO,SAAD,OAAWnD,M,uDAnBzB,WAAqB,IACTA,EAAUgC,EAAenB,KAAKH,MAAMwC,SAASC,QAA7CnD,MACLA,GACCa,KAAK0B,oBAAoBvC,K,gCAIjC,SAAmBoD,EAAWC,GAAY,IACxBC,EAAatB,EAAeoB,EAAUF,SAASC,QAAtDnD,MACOuB,EAAaS,EAAenB,KAAKH,MAAMwC,SAASC,QAAvDnD,MAEJsD,IAAc/B,GACbV,KAAK0B,oBAAoBhB,K,oBAWjC,WAAU,IACCe,EAAWzB,KAAKd,MAAhBuC,QACP,OACI,gCACI,cAAC,EAAD,CAAW3B,SAAUE,KAAKiC,oBAC1B,cAACS,EAAA,EAAD,CAAWjB,QAASA,W,GAvCXnB,aAkDViB,a,gCC7Df,+BAqBehB,iBAlBG,SAAC,GAAyB,IAAxBkB,EAAuB,EAAvBA,QAASY,EAAc,EAAdA,SACzB,OACI,6BACKZ,EAAQkB,KAAI,SAAAC,GAAM,OACf,6BACI,cAAC,IAAD,CACIC,GAAI,CACAT,SAAS,UAAD,OAAYQ,EAAOE,IAC3B5D,MAAO,CAAC6D,KAAMV,IAHtB,SAMKO,EAAOI,SAPLJ,EAAOE","file":"static/js/movies-page-view.3b1d065f.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nimport { toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport PropTypes from 'prop-types'\r\nimport {withRouter} from 'react-router-dom'\r\n\r\nclass Searchbar extends Component {\r\n    state ={\r\n      query: '',  \r\n    }\r\n\r\nhandleChange = evt => {\r\n    this.setState({ query: evt.currentTarget.value.toLowerCase()})\r\n}\r\n\r\nhandleSubmit = evt => {\r\n    evt.preventDefault();\r\n    if(this.state.query.trim() === ''){\r\n      toast('Enter some word!')\r\n      return;\r\n    }\r\n\r\n    this.props.onSubmit(this.state.query);\r\n    this.setState({query: ''})\r\n  }\r\n\r\nrender() {\r\n    return (\r\n        <form \r\n        //   className={styles.SearchForm}\r\n          onSubmit={this.handleSubmit}>         \r\n          <input\r\n            // className={styles.SearchFormInput}\r\n            type=\"text\"\r\n            autoComplete=\"off\"\r\n            autoFocus\r\n            placeholder=\"Search movie\"\r\n            value={this.state.query}\r\n            onChange={this.handleChange}\r\n          />\r\n          <button type=\"submit\" \r\n        //   className={styles.SearchFormButton}\r\n          >Search\r\n          </button>\r\n        </form>\r\n    )\r\n}}\r\n\r\nSearchbar.propTypes={\r\n  onSubmit: PropTypes.func,\r\n  query: PropTypes.string\r\n}\r\n\r\nexport default withRouter(Searchbar)","function fetchMovie(nextQuery){\r\n    const MY_KEY = 'c380f664e1da9ad09772f37426d65949'\r\n    return fetch(`https://api.themoviedb.org/3/search/movie?api_key=${MY_KEY}&language=en-US&query=${nextQuery}&page=1&include_adult=false`)\r\n    .then(response => {\r\n        if(response.ok){\r\n            return response.json();\r\n        }\r\n        return Promise.reject(\r\n            new Error(`Нет такого ${nextQuery}`)\r\n        );\r\n    })\r\n}\r\nconst api = {\r\n    fetchMovie,\r\n}\r\n\r\nexport default api;","import queryString from 'query-string';\r\n\r\nexport default function getQueryParams(qs) {\r\n    return queryString.parse(qs)\r\n}","import Axios from 'axios';\r\nimport React, { Component } from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport {Link} from 'react-router-dom';\r\nimport { ToastContainer, toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport Searchbar from '../Searchbar/Searchbar';\r\nimport fetchAPI from '../MovieApiService'\r\nimport MovieList from '../MovieList/MovieList'\r\nimport getQueryParams from '../../utils/getQueryParams'\r\n\r\nclass MoviesPage extends Component {\r\n    state = {\r\n        query:'',\r\n        movies: [],\r\n        results: []\r\n    }\r\n\r\n    fetchMovieWithQuery = query => fetchAPI.fetchMovie(query)\r\n    .then(data => this.setState({results: data.results}))\r\n    .catch(error => console.log(error))    \r\n\r\n    componentDidMount() {\r\n        const { query } = getQueryParams(this.props.location.search)\r\n        if(query) {\r\n            this.fetchMovieWithQuery(query)\r\n        }\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState) {\r\n        const {query :prevQuery} = getQueryParams(prevProps.location.search)\r\n        const {query :nextQuery} = getQueryParams(this.props.location.search)\r\n\r\n        if(prevQuery !== nextQuery){\r\n            this.fetchMovieWithQuery(nextQuery)\r\n        }\r\n    }\r\n\r\n    handleQueryChange = query =>{\r\n        this.props.history.push({\r\n            pathname: this.props.location.pathname,\r\n            search: `query=${query}`\r\n        })\r\n    }\r\n\r\n    render() {\r\n        const {results} = this.state;\r\n        return (\r\n            <div>\r\n                <Searchbar onSubmit={this.handleQueryChange} />            \r\n                <MovieList results={results}/>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nMoviesPage.propTypes={\r\n    query: PropTypes.string,\r\n    movies: PropTypes.array,\r\n    results: PropTypes.array,\r\n}\r\nexport default MoviesPage","import React from 'react'\r\nimport {Link, withRouter} from 'react-router-dom'\r\n\r\nconst MovieList = ({results, location}) => {\r\n    return (\r\n        <ul>\r\n            {results.map(result => (\r\n                <li key = {result.id}>\r\n                    <Link \r\n                        to={{\r\n                            pathname: `movies/${result.id}`,\r\n                            state: {from: location},\r\n                        }}\r\n                    >\r\n                        {result.title}</Link>\r\n                </li>\r\n            ))}\r\n        </ul>\r\n    )\r\n}\r\n\r\nexport default withRouter(MovieList)"],"sourceRoot":""}